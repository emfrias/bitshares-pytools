#!/usr/bin/env python2
import argparse
import os
import csv
import bitsharestools.address as Address
import bitsharestools.paperwallet as Paper 

def main() :
    parser = argparse.ArgumentParser(description='Construct paperwallets according to file')
    parser.add_argument('--design', type=str, help='Design of the paperwallet (defaults to "cass")')
    parser.add_argument('-svg', help='Store as SVG instead of PDF', action='store_true')
    parser.add_argument('--amount', type=str, help='Text (amount) to be placed on the paper wallet')
    parser.add_argument('--asset', type=str, help='Asset label to be placed on the paper wallet')
    parser.add_argument('-encrypt', help='Encrypt private key with BIP38!', action='store_true')
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--wallet', type=str, help='wallet csv file (i.e. generated by sharedrop.py)')
    group.add_argument('--number', type=int, help='Number of wallets to create randomly')
    parser.set_defaults(design="cass", amount="", asset=None)
    args = parser.parse_args()

    '''
    Optionally encrypt with BIP38
    '''
    pw = ""
    if args.encrypt :
        import getpass
        while True :
            pw = getpass.getpass('Passphrase: ')
            pwck = getpass.getpass('Retype passphrase: ')
            if(pw == pwck) : 
                break
            else :
                print("Given Passphrases do not match!")

    '''
    Construct data or read data from file
    '''
    wallet = []
    if args.wallet : 
        with open(args.wallet, 'r') as csvfile:
            spamwriter = csv.reader(csvfile, delimiter=';')
            for wif,add,amount,asset in spamwriter :
                ''' Verify that the private keys gives access to address in add '''
                assert Address.priv2btsaddr(Address.wif2hex(wif)) is not add, "private key for address %s is different from given address %s" %(Address.priv2btsaddr(Address.wif2hex(wif)), add) 
                wallet.append([wif,add,amount,asset])
    else : 
        for i in xrange(0, args.number) :
            wif = Address.newwif()
            add = Address.wif2btsaddr(wif)
            wallet.append([wif,add,args.amount,args.asset])

    '''
    Construct paper wallets
    '''
    print( "Constructing paper wallets" )
    if not args.svg :
        import svg2pdf
        import io
        from PyPDF2 import PdfFileMerger, PdfFileReader
        mergerfront = PdfFileMerger()
        mergerback  = PdfFileMerger()
        for w in wallet :
            wif,add,amount,asset = w
            print("Creating Paperwallet for %s" % (add))
            front,back = Paper.paperwallet(wif, add, amount, asset, encrypt=pw, design=args.design)
            if args.svg :
                filename = "paperwallets/%s.svg"%add
                open(filename.replace('.svg','-front.svg'), 'wb').write(front)
                open(filename.replace('.svg','-back.svg'), 'wb').write(back)
            else :
                mergerfront.append(PdfFileReader(io.BytesIO(bytes(svg2pdf.svg2pdf(front)))))
                mergerback.append(PdfFileReader(io.BytesIO(bytes(svg2pdf.svg2pdf(back)))))
        mergerfront.write("paperwallets-front.pdf")
        mergerback.write("paperwallets-back.pdf")
    else :
        for w in wallet :
            wif,add,amount,asset = w
            print("Creating Paperwallet for %s" % (add))
            front,back = Paper.paperwallet(wif, add, amount, asset, encrypt=pw, design=args.design)
            filename = "paperwallets/%s.svg"%add
            open(filename.replace('.svg','-front.svg'), 'wb').write(front)
            open(filename.replace('.svg','-back.svg'), 'wb').write(back)
    print( "Done." )

if __name__ == '__main__':
    main()
